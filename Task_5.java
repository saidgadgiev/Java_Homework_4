import java.util.Deque;
import java.util.LinkedList;
public class Task_5 {
    //Дана строка содержащая только символы '(', ')', '{', '}', '[' и ']', определите,
    // является ли входная строка логически правильной.
    // Входная строка логически правильная, если:
    // 1) Открытые скобки должны быть закрыты скобками того же типа.
    // 2) Открытые скобки должны быть закрыты в правильном порядке. Каждая закрывающая скобка имеет соответствующую
    // открытую скобку того же типа.
    // ()[] = true
    // () = true
    // {[()]} = true
    // ()() = true
    // )()( = false
    public static void main(String[] args) {
        String[] strings = {"()[]", "()", "{[()]}", "()()", ")()("};
        for (String s : strings) {
            System.out.println(s + " - " + validate(s));
        }
    }

    public static boolean validate(String s){

        // Создаем стек для хранения открывающих скобок
        Deque<Character> stack = new LinkedList<>();

        // Проходим по строке
        for (char c : s.toCharArray()) {

            // Если текущий символ - открывающая скобка, помещаем ее в стек
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            }
            // Если текущий символ - закрывающая скобка
            else if (c == ')' || c == '}' || c == ']') {

                // Если стек пустой, значит открывающей скобки для этой закрывающей нет
                if (stack.isEmpty()) {
                    return false;
                }

                // Иначе, вытаскиваем последнюю открывающую скобку из стека
                char last = stack.pop();

                // Проверяем, соответствует ли тип закрывающей скобки открывающей
                if ((c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[')) {
                    return false;
                }
            }
        }

        // Если после прохождения по строке стек не пустой, значит какие-то открывающие скобки не закрыты
        return stack.isEmpty();
    }

}
